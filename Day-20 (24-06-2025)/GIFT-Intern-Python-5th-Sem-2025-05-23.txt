Start Date: 23-05-2025 to 10-07-2025
Time: Monday to Friday (10:00 am-12:00 am)
Course: PYTHON with DJANGO
WhatsApp group: GIFT-Intern-Python-5th-Sem
GitHub-Link: https://github.com/milandas63/GIFT-Intern-Python-5th-Sem-2025-05-23/
Wifi Password: #A1B2C3E5D4#

Participants:
MILAN DAS                   7978168568      milandas63@gmail.com                milandas63
 1  Adyasha Swain           7894419620      adyashas2023@gift.edu.in            adyasha-as
 2  Akanksha Panigrahi      9337780115      akankshap0517@gmail.com             akankshap1705
 3  Ananya Gumansingh       8260788368      ananyag2023@gift.edu.in             Ananya-2005
 4  Barshita Pattnaik       7684806111      barshita07@gmail.com                Barshitapattnaik
 5  Bidyadhar Behera        9668895756      bidyadharb666@gmail.com             Bidyadhar666
 6  Deepak Kumar Samantara  9861408828      deepakkumarsamantara5@gmail.com     deepakkumarsamantara
 7  Deepak Kumar Senapati   7847983345      deepakkumarsenapati786@gmail.com    Deepak7867
 8  Dibyajyoti Nayak        9861426047      babalukumarnayak121212@gmail.com    dibyajyotinayak92
 9  Kasturi Samantaray      9937945726      kasturisamantaray604@gmail.com      KasturiSamantaray02
10  Mohd Anwar              6005194557      anwarbf317@gmail.com                anwrr07
11  P Sumant Raj Patro      7894138336      patropsumantraj@gmail.com           sumant130
12  Prabhu Prasad Jena      9337579220      prabhuprasadj9@gmail.com            prabhu369414
13  Reemarani Panda         9310883613      reemareema3034@gmail.com            reema-2025
14  Sairam Majhi            8480014152      sairammajhi9443@gamil.com           Sairam1407
15  Shakti Prasad Sahoo     7381116465      sahooshakti8018@gmail.com           Okaycore55
16  Smruti Ranjan Barik     7609866172
17  Subhadarsini Jena       8018696003      subhadarsinijena2006@gmail.com      subhadarsinijena
18  Subhalaxmi Nanda        8984108572      subhalaxmi2023@gift.edu.in          Subhalaxmi-2023
19  Subham Satapathy        8637210911      subhamsatpathy2004@gmail.com        Subham596
20  Surya Kant Pradhan      7894849781      suryapradhan693@gmail.com           suryakant969
21  Swayamshree Abhilipsa   6370780385      abhilipsaswayamshree@gmail.com      abhilipsaa-123


+--------------------+
| Friday, 23-05-2025 |  Day-01
+--------------------+
    =   Knowing each other
    =   Induction programme
    =   Prequalification requirement
        >   Atleast one programming language
        >   Must have your own laptop system
    =   Introduction to Cyber Security and Cloud Computing


+--------------------+
| Monday, 26-05-2025 |  Day-02
+--------------------+
    =   Python was created by Guido van Rossum, a Dutch programmer, in the late 1980s
        and officially released in 1991. Here's a summary of how and why Python was created:

    =   The Python programming language is named after the British comedy troupe Monty
        Python's Flying Circus, says Sifars. Guido van Rossum, the creator of Python,
        was a fan of the show and wanted a short, unique, and slightly mysterious name
        for the language. The name "Python" also reflects van Rossum's goal of making
        the language easy to learn and use, says Teradata.

    =   üìú Background and Motivation
        In the late 1980s, van Rossum was working at the Centrum Wiskunde & Informatica (CWI)
        in the Netherlands.

    =   He had worked on a project called ABC, a teaching language designed to be simple
        and easy to learn. However, ABC had limitations and lacked extensibility.

    =   Frustrated with ABC‚Äôs shortcomings, van Rossum wanted to build a new scripting
        language that retained ABC‚Äôs ease of use but added more flexibility, power, and
        extensibility.

    =   üõ†Ô∏è Development of Python
        During a Christmas break in 1989, van Rossum began developing Python as a hobby
        project.

    =   His goals were:
        >   Easy and intuitive syntax.
        >   Code readability and simplicity.
        >   Support for exception handling.
        >   Interfacing with the Amoeba distributed operating system (which he worked on).

    =   Extensibility using C.
        The name ‚ÄúPython‚Äù was inspired by the British comedy group Monty Python‚Äîvan
        Rossum wanted a name that was short, unique, and slightly mysterious, not after
        the snake.

    =   üöÄ First Release
        Python 1.0 was released in February 1991 on the alt.sources newsgroup.

        It included:
        >   Exception handling.
        >   Functions and modules.
        >   Core data types like lists, strings, and dictionaries.
        >   Basic object-oriented features.

    =   üìà Evolution and Impact
        Python gradually grew in popularity through the 1990s and 2000s due to its
        simplicity and versatility.

    =   Major milestones:
        >   Python 2.0 in 2000 introduced garbage collection and list comprehensions.
        >   Python 3.0 in 2008 broke backward compatibility to fix design flaws and
            streamline the language.
        >   Today, Python is maintained by the Python Software Foundation (PSF), with
            contributions from a large global community.

    =   üåç Why It Matters
        Python is now one of the most widely used programming languages in the world,
        especially in fields like:

        Web development
        Data science
        Machine learning
        Automation
        Education

    =   Guido van Rossum is often referred to as Python's "Benevolent Dictator For Life"
        (BDFL), a title he held until he stepped down from the role in 2018.

    =   Let me know if you'd like a timeline or infographic of Python‚Äôs history!

    =   PYTHON KEYWORDS
        Python has a set of keywords that are reserved words that cannot be
        used as variable names, function names, or any other identifiers:

        KEYWORD     DESCRIPTION
         1_ and         A logical operator
         2_ as          To create an alias
         3. assert      For debugging
         4_ break       To break out of a loop
         5_ class       To define a class
         6. continue    To continue to the next iteration of a loop
         7_ def         To define a function
         8. del         To delete an object
         9_ elif        Used in conditional statements, same as else if
        10_ else        Used in conditional statements
        11_ except      Used with exceptions, what to do when an exception occurs
        12_ False       Boolean value, result of comparison operations
        13_ finally     Used with exceptions, a block of code that will be executed no matter if there is an exception or not
        14_ for         To create a for loop
        15. from        To import specific parts of a module
        16_ global      To declare a global variable
        17_ if          To make a conditional statement
        18_ import      To import a module
        19_ in          To check if a value is present in a list, tuple, etc.
        20. is          To test if two variables are equal
        21_ lambda      To create an anonymous function
        22. None        Represents a null value
        23. nonlocal    To declare a non-local variable
        24_ not         A logical operator
        25_ or          A logical operator
        26. pass        A null statement, a statement that will do nothing
        27_ raise       To raise an exception
        28_ return      To exit a function and return a value
        29_ True        Boolean value, result of comparison operations
        30_ try         To make a try...except statement
        31. while       To create a while loop
        32. with        Used to simplify exception handling
        33. yield       To return a list of values from a generator


+---------------------+
| Tuesday, 27-05-2025 |  Day-03
+---------------------+
    =   1)  # Single line comment
        2)  """
            Anything embedded within a pair of 3 double quotes is treated as comment
            """
        3)  name = <string>
            string is embedded with double quote or single quote. The choice is yours.
        4)  Addition
        5)  Subtraction
        6)  Multiplication
        7)  Division
        8)  Formula (several operators used together)
        9)  List  []
        10) Dictionary  {}
        11) Set {}

    =   Functions:
        1)  chr(n)      -   Converts a ascii value to its equivallent character
        2)  input()     -   Halts execution and takes a value from the keyboard

    =   ASSIGNMENT:
        Solve the figure programs (Question-11) from Questions.txt

+----------------------+
| Thursday, 28-05-2025 |  Day-04
+----------------------+
    =   What is a range?
        The range() function in Python returns a range object, which is an immutable
        sequence of numbers. It does not return a list or tuple directly. This object
        is memory-efficient because it generates numbers on demand rather than storing
        them all in memory at once.

        The range() function can be used in several ways:
        >   range(stop): Generates numbers from 0 up to (but not including) stop.
        >   range(start, stop): Generates numbers from start up to (but not including) stop.
        >   range(start, stop, step): Generates numbers from start up to (but not including)
            stop, incrementing by step.
        >   The range object can be iterated over using a for loop or converted into a
            list or tuple using the list() or tuple() functions, respectively.

    =   Rules for Python variables:
        >   A variable name must start with a letter or the underscore character
            [A-Z,a-z,_]
        >   A variable name cannot start with a digit
        >   A variable name can only contain alpha-numeric characters and underscores
            (A-z, 0-9, and _ )
        >   Variable names are case-sensitive (age, Age and AGE are three different
            variables)
        >   A variable name cannot be any of the Python keywords.

            name
            _14thStreet
            24praganas

    =   Many Values to Multiple Variables
        x, y, z = 1, 2, 3

    =   One Value to Multiple Variables
        x = y = z = 10

    =   Unpack a Collection
        x, y, z = ["Red","Green","Blue"]

    =   Global Variables
        global.py

    =   Write a program to invert the case of all alphabetic characters?
        invert_case.py

    =   What is tuple?
        >   Tuple is a special type of list that is immutable by nature.
            The content of the list can't be changed.
        >   Tupes are created using round brackets ()

    =   Write a program to print the multiplication table from 2 to 25

    =   ASSIGNMENT
        Count the number of occurrences of each character in a given string?

            Hello World    Students Allowed       Holocaust
               D = 1           A - 1                A - 1
               E - 1           D - 2                C - 1
               H - 1           E - 2                H - 1
               L - 3           L - 2                L - 1
               O - 2           N - 1                O - 2
               R - 1           O - 1                S - 1
               W - 1           S - 2                T - 1
                               T - 2                U - 1
                               U - 1
                               W - 1


+--------------------+
| Friday, 30-05-2025 |  Day-05
+--------------------+
    =   Built-in data types in Python are fundamental data types that are readily available
        for use without requiring any additional libraries or modules. Here's a breakdown
        of the common built-in data types:
        >   Numeric Types:
            int: Represents integer values (e.g., 10, -5, 0).
            float: Represents floating-point numbers (e.g., 3.14, -2.5, 0.0).
            complex: Represents complex numbers with a real and imaginary part (e.g., 2+3j).
        >   Text Type:
            str: Represents sequences of characters (e.g., "hello", 'world').
        >   Sequence Types:
            list: Ordered, mutable collections of items (e.g., [1, 2, 3], ['a', 'b', 'c']).
            tuple: Ordered, immutable collections of items (e.g., (1, 2, 3), ('a', 'b', 'c')).
            range: Represents a sequence of numbers (e.g., range(5) generates 0, 1, 2, 3, 4).
        >   Mapping Type:
            dict: Represents collections of key-value pairs (e.g., {'name': 'Alice', 'age': 30}).
        >   Set Types:
            set: Unordered collections of unique items (e.g., {1, 2, 3}).
            frozenset: Immutable version of set.
        >   Boolean Type:
            bool: Represents boolean values, either True or False.
        >   Binary Types:
            bytes: Immutable sequences of single bytes (e.g., b'hello').
            bytearray: Mutable sequences of single bytes.
            memoryview: Allows access to the internal data of an object without copying.

        These data types form the foundation for working with data in Python. Each type
        has its own properties and methods, allowing you to perform various operations
        based on the type of data you are working with.

    =   Python has the following data types built-in by default, in these categories:
        >   Text Type:	    str
        >   Numeric Types:	int, float, complex
        >   Sequence Types:	list, tuple, range
        >   Mapping Type:	dict
        >   Set Types:	    set, frozenset
        >   Boolean Type:	bool
        >   Binary Types:	bytes, bytearray, memoryview
        >   None Type:	    NoneType

    =   Getting the Data Type
        You can get the data type of any object by using the type() function:

    =   Setting the Data Type
        In Python, the data type is set when you assign a value to a variable:

        Example	Data Type
            x = "Hello World"	                            str
            x = 20	                                        int
            x = 20.5	                                    float
            x = 1j	                                        complex
            x = ["apple", "banana", "cherry"]	            list
            x = ("apple", "banana", "cherry")	            tuple
            x = range(6)	                                range
            x = {"name" : "John", "age" : 36}	            dict
            x = {"apple", "banana", "cherry"}	            set
            x = frozenset({"apple", "banana", "cherry"})	frozenset
            x = True	                                    bool
            x = b"Hello"	                                bytes
            x = bytearray(5)	                            bytearray
            x = memoryview(bytes(5))	                    memoryview
            x = None	                                    NoneType

    =   Setting the Specific Data Type
        If you want to specify the data type, you can use the following constructor
        functions:

        Example	Data Type
            x = str("Hello World")	                        str	
            x = int(20)	                                    int	
            x = float(20.5)	                                float	
            x = complex(1j)	                                complex	
            x = list(("apple", "banana", "cherry"))	        list	
            x = tuple(("apple", "banana", "cherry"))	    tuple	
            x = range(6)	                                range	
            x = dict(name="John", age=36)	                dict	
            x = set(("apple", "banana", "cherry"))	        set	
            x = frozenset(("apple", "banana", "cherry"))	frozenset	
            x = bool(5)	                                    bool	
            x = bytes(5)	                                bytes	
            x = bytearray(5)	                            bytearray	
            x = memoryview(bytes(5))	                    memoryview	


+--------------------+
| Monday, 02-06-2025 |  Day-06
+--------------------+
    =   What are modules in Python?
        Modules in Python are files containing Python code, which can include 
        functions, classes, and variables. Python modules can be imported into
        other Python programs, allowing you to use the code defined within them.
        This avoids code duplication and promotes a modular approach to programming.

        Python has a standard library with many built-in modules that offer solutions
        to common programming problems. You can also create your own modules to 
        organize your code.

    =   ASSIGNMENT:
        Write a program to show the tree of folders and files in a specified folder name.

    =   ASSIGNMENT:
        WAP to print the following list in reverse order:
        [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12, 13, 15], [16, 17, 18, 19]]


+---------------------+
| Tuesday, 03-06-2025 |  Day-07
+---------------------+
    =   Explore Str class
        dir(str)

    =   What is OOPs (Object Oriented Programming)
        OOPs is a paradim, a way of writing computer programs.
        C++, Java, Python, ... are OOPs languages.

    =   In an OOPs language, there are 3 features:
        1)  Encapsulation
            When the programming code and the data are embedded together within one
            unit called a class, it is encapsulation
                class Name {            class Name:
                }                           # code

            Abstraction
                The technique to hide the visibility of a data member within a class
                from other classes is known as abstraction

        2)  Inheritance
            When the class inherits another class, and the code of the parent class
            may be used as if it has been written within the same class
                parent      super       base
                child       sub         derived

            Single Inheritance

                class Parent():
                    def __init__(self):
                        print("Hello World from Parent")

                class Child(Parent):
                    def __init__(self):
                        print("Hello World from Child")

                - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            Multiple Inheritance

                class a():
                    def funcA():
                        print("This is a")

                class b(a):
                    def funcB():
                        print("This is b")

                class c(b):
                    def funcC():
                        print("This is c")

                class d(c,a):
                    def funcD():
                        print("This is d")

            Multilevel Inheritance

                +- a
                |  +- b
                |  |  +- c
                |  |  |  +- d


        3)  Polimorphism
            When functions/methods have similar name, it is polymorphism.
            There are 2 types of polymorphism:
            i)  Overloading
                When two or more methods have same name with different parameters in
                the same class, it is known as overloading

                class Example():
                    def work():
                        print("work")

                    def work(name):
                        print(name)

           ii)  Overriding
                When methods have same name are defined in the parent class and in
                the child class, it is known as overriding

                class Parent():
                    def assign():
                        print("Assignment")
                
                class Child(Parent):
                    def assign():
                        print("Redefined")

    =   ASSIGNMENT:
        Create classes to demonstrate multiple and multilevel inheritance?


+-----------------------+
| Wednesday, 04-06-2025 |  Day-08
+-----------------------+
    =   What is exception handling?
        Exception handling is a fault resistant technique implemented in the programming
        languages. During runtime, if the program encounters any error, it branches
        its execution to a user defined path instead of abruptly termination the program
        and displaying complex and technical messages for the user.

    =   What is error handling in Python?
        When there is an error during execution of a Python program, the compiler
        generates a message.

    =   Exception Handling in Python
        For exception handling Python has provided the "try" statement.
        The try statement has another 3 clauses:
            try:...except:...except:...else:...finally:...

    =   Errors are handled in a statement called try-except-finally

    =   The main program is written the try block. When an exception/error occurs
        within the block, an exception object is generated and the execution sequence
        is interrupted. The exception is matched with all the exception names associated
        with the except clause.

        If there is no error in the program, the try statement executes the else clause.

        In case finally clause is used in the try statement, it must be executed, if
        there is not error or there is error.

    =   When an error occurs in the program, within the try block, an error object
        is generated. This object is matched with all the class type that is specified
        in the except clauses.

    =   PYTHON BUILT-IN EXCEPTIONS
        The table below shows built-in exceptions that are usually raised in Python:

        EXCEPTION           DESCRIPTION
        ArithmeticError     Raised when an error occurs in numeric calculations
        AssertionError      Raised when an assert statement fails
        AttributeError      Raised when attribute reference or assignment fails
        Exception           Base class for all exceptions
        EOFError            Raised when the input() method hits an "end of file" condition (EOF)
        FloatingPointError  Raised when a floating point calculation fails
        GeneratorExit       Raised when a generator is closed (with the close() method)
        ImportError         Raised when an imported module does not exist
        IndentationError    Raised when indentation is not correct
        IndexError          Raised when an index of a sequence does not exist
        KeyError            Raised when a key does not exist in a dictionary
        KeyboardInterrupt   Raised when the user presses Ctrl+c, Ctrl+z or Delete
        LookupError         Raised when errors raised cant be found
        MemoryError         Raised when a program runs out of memory
        NameError           Raised when a variable does not exist
        NotImplementedError Raised when an abstract method requires an inherited class to override the method
        OSError             Raised when a system related operation causes an error
        OverflowError       Raised when the result of a numeric calculation is too large
        ReferenceError      Raised when a weak reference object does not exist
        RuntimeError        Raised when an error occurs that do not belong to any specific exceptions
        StopIteration       Raised when the next() method of an iterator has no further values
        SyntaxError         Raised when a syntax error occurs
        TabError            Raised when indentation consists of tabs or spaces
        SystemError         Raised when a system error occurs
        SystemExit          Raised when the sys.exit() function is called
        TypeError           Raised when two different types are combined
        UnboundLocalError   Raised when a local variable is referenced before assignment
        UnicodeError        Raised when a unicode problem occurs
        UnicodeEncodeError  Raised when a unicode encoding problem occurs
        UnicodeDecodeError  Raised when a unicode decoding problem occurs
        UnicodeTranslateError   Raised when a unicode translation problem occurs
        ValueError          Raised when there is a wrong value in a specified data type
        ZeroDivisionError   Raised when the second operator in a division is zero

    =   What is finally clause:
        The finally clause is associated with try statement.
        finally clause is optional. If the finally is present, the block associated
        with the finally clause is executed in either case, if there is an error or
        there is no error.

        >   Exception
            +- AirthmeticError
            |  +- ZeroDivisionError
            Example:
                divident = 1099
                divisor = 0

                try:
                    result = dividend / divisor
                    print("Result:", result)
                except ArithmeticError:
                    print("Error: Arithmetic error occurred!")

            In the above example, divisor remaining 0 in the division, will generate
            AirthmeticError.

        >   AssertionError
            Example:
                # Handling it manually
                try:
                    x = 1
                    y = 0
                    assert y != 0, "Invalid Operation"
                    print(x / y)

                # the errror_message provided by the user gets printed
                except AssertionError as msg:
                    print(msg)

        >   AttributeError
            Example:
                x = 10
                x.append(6)

            Output:
                Traceback (most recent call last):
                  File "/home/46576cfdd7cb1db75480a8653e2115cc.py", line 2, in
                    x.append(6)
                AttributeError: 'int' object has no attribute 'append'

            Example-2:
                string = "The famous website is { }".fst("wikipedia")
                print(string)
                    Traceback (most recent call last):
                      File "<stdin>", line 1, in <module>
                    AttributeError: 'str' object has no attribute 'fst'

        >   ModuleNotFoundError
            Example:
                import umymodule
                dir(umymodule)
                print('Exception')

        >   IndentationError
            Example:
                def check_number(a):
                if a > 2:
                if a < 7:
                return "Number is between 2 and 7"
                return "Number is greater than 2"
                return "Number is out of the range of 2 and 7"

                a = 5
                result = check_number(a)
                print(result)

            Output:
            Indentation error.

        >   IndexError
            name = 'Gurudas Singh'
            print(name[20])

        >   ZeroDivisionError
            numerator = 45
            denominator = 0
            quotient = numerator / denominator
            print(quotient)

        >   SyntaxError
            Example-1:
                assert = "Python Exceptions"

            Example-2:
                for s in string:
                    if (s != o:
                        print(s)

        >   NameError
            string = "Python Exceptions"
            for s in string:
                if (s != o):
                    print(s)

        >   ValueError
            s1 = int(input("Enter a number: "))
            Enter a number: 8OO00
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
            ValueError: invalid literal for int() with base 10: '8OO'

    =   User defined error
        class MyError(Exception):
            def __init__(self):
                print("MyError Exception")

        raise MyError()

        Output:
        MyError Exception
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        MyError

    =   raise is only associated with errors class:
        class Process():
            def __init__(self):
                print("Process error")

        raise Process()

        Output:
        Process error
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: exceptions must derive from BaseException

    =   A certain country want to print the voter-id card for its citizens. The
        citizen who is:
            >= 18 and <=90      have right to vote
            -36
            0

        [27, 63, -33, 45, 66, 101, 54, 71, 0, 72, 81, -21, 16, 90, 55, 77]

        Exception
        +- AgeError
        |   +- InvalidAgeError
        |   |  +- NegativeAgeError
        |   |  +- ZeroAgeError
        |   +- AgeCeilingError
        |   |  +- LowerAgeError
        |   |  +- UpperAgeError

    =   ASSIGNMENT:
        Create a Login project with user defined errors.
        Code the project by taking the username and password from the user.

        Exception
        +- LoginError
        |  +- UsernameError
        |  |  +- Length less than 8 characters
        |  |  +- Starts with lower case character
        |  |  +- Invalid characters found
        |  |  +- 
        |  |  +- 
        |  |  +- 
        |  |  +- 
        |  +- PasswordError
        |  |  +- 
        |  |  +- 
        |  |  +- 
        |  |  +- 
        |  |  +- 
        |  |  +- 

+----------------------+
| Thursday, 05-06-2025 |  Day-09
+----------------------+
    =   File Handling

    =   What is a File?
        A file is an entry in the secondary storage.

    =   There are 4 steps required in file handling.
        1)  Open
        2)  Read
        3)  Write
        4)  Close

    =   When you open the file, say why you are opening:
        There are basically 3 modes for opening a file
        1)  Create
        2)  Read
        3)  Write

    =   Modes required in the open file function:
        r:  open an existing file for a read operation.
        w:  open an existing file for a write operation. If the file already contains
            some data, then it will be overridden but if the file is not present then
            it creates the file as well.
        a:  open an existing file for append operation. It won‚Äôt override existing data.
        r+: To read and write data into the file. This mode does not override the
            existing data, but you can modify the data starting from the beginning
            of the file.
        w+: To write and read data. It overwrites the previous file if one exists,
            it will truncate the file to zero length or create a file if it does not
            exist.
        a+: To append and read data from the file. It won‚Äôt override existing data.

    =   What is lambda in Python?
        lambda is a key word in Python that allows to create a single line function
        that returns some value.

            x = lambda a, b : (a+b)
            print( x(10,20) )

            y = lambda x,y : x**y
            print( y(3,3) )

    =   To read a file character by character, use the lambda function.

    =   ASSIGNMENT:
        Write a program to count the number of words in a text file?

    =   ASSIGNMENT:
        Write a program to read the following fields from the console and
        write it on to a CSV (Comma Separated Values) file.

            1, "Milan Das", "Male", "PhD", "milandas63@gmail.com", "7978168568"
            2, "Sanjay Gokle","Male","MCA","goklesanjay77@gmail.com","9778911223"

        Fields:
            1.  Slno (Serial Number)
            2.  Name of the person
            3.  Gender
            4.  Qualification
            5.  Email id
            6.  Mobile Number


+----------------------+
| Thursday, 05-06-2025 |  Day-10
+----------------------+
    =   File Handling


+--------------------+
| Friday, 06-06-2025 |  Day-11
+--------------------+
    =   Python Test


+--------------------+
| Monday, 09-06-2025 |  Day-12
+--------------------+
    =   What is a File?
        A file is an entry in the secondary storage.

    =   There are 4 steps required in file handling.
        1)  Open
        2)  Read
        3)  Write
        4)  Close

    =   Modes required in the open file function:
        r:  open an existing file for a read operation.
        w:  open an existing file for a write operation. If the file already contains
            some data, then it will be overridden but if the file is not present then
            it creates the file as well.
        a:  open an existing file for append operation. It won‚Äôt override existing data.
        r+: To read and write data into the file. This mode does not override the
            existing data, but you can modify the data starting from the beginning
            of the file.
        w+: To write and read data. It overwrites the previous file if one exists,
            it will truncate the file to zero length or create a file if it does not
            exist.
        a+: To append and read data from the file. It won‚Äôt override existing data.

    =   ASSIGNMENT:
        Write a program to search the content of a text file for a word and replace it
        with another word and write it to a new file.

    =   Solve all questions in the following link page:
        https://mobileappcircular.com/python-quiz-string-slicing-751653bbae7

    =   Write a program to write the data to 2 files:
            
            File-1 (stud.csv)       File-2 (mark.csv)
            1. Roll-No              1. Mark-Eng
            2. Student Name         2. Mark-Phy
            3. Gender               3. Mark-Che
            4. Email-id             4. Mark-Bio
            5. Class                5. Mark-Math

+---------------------+
| Tuesday, 10-06-2025 |   Day-12
+---------------------+
    =   Create a Contact database using RDBMS (Relational DataBase Management System)
        relation:
            slno                                rel_id
            relationship                        rel_desc

        location:
            slno                                loc_id
            location                            loc_desc
            abbreviation                        loc_abbr

        contact:
            slno                                con_id
            name                                con_name
            gender                              con_sex
            dob                                 con_dob
            email                               con_email
            mobile                              con_mob
            rslno   foreignkey is relation      rel_id
            lslno   foreignkey is location      loc_id

    =   How to work with MySQL database
        STEPS INVOLVED
        1.  Download mysql-connect-python (once)
            pip install mysql-connector-python
        2.  import mysql-connector
        3.  Create Connection object
        4.  Create Cursor object
        5.  Manipulate the cursor


+-----------------------+
| Wednesday, 11-06-2025 |   Day-13
+-----------------------+
    =   Salvaging database connectivity

+----------------------+
| Thursday, 12-06-2025 |   Day-14
+----------------------+
    =   Write a program to read data from the console and write the same into database
        table.

    =   Write a program to create a new product in the pos system.

+---------------------+
| Tuesday, 17-06-2025 |   Day-15
+---------------------+
    =   TKinter for desktop application

    =   TKinter
        Tkinter is a Graphical User Interface development library in Python. The
        library has to be separately installed using PIP.
            pip install tk

    =   To work with images in tkinter, install Pillow library:
            pip install Pillow

    =   List of widgets in tkinter:
        Here is a list of common components (widgets) in Tkinter:
            Button: Triggers an action when clicked.
            Canvas: Provides a space for drawing graphics, text, and images.
            Checkbutton: Allows users to select multiple options.
            Combobox: Creates a dropdown list for selecting from a set of options.
            Entry: Accepts single-line text input from the user.
            Frame: Acts as a container to organize other widgets.
            Label: Displays static text or images.
            Listbox: Displays a list of selectable items.
            Menu: Creates menus for application commands.
            Menubutton: Creates a button that displays a menu when clicked.
            Notebook: Creates a tabbed interface.
            PanedWindow: Allows resizing of multiple sub-windows.
            Progressbar: Shows the progress of a task.
            Radiobutton: Allows users to select only one option from a group.
            Scale: Provides a slider for selecting a numeric value.
            Scrollbar: Enables scrolling for other widgets like Listbox or Text.
            Separator: Creates a visual separator between widgets.
            Sizegrip: Allows resizing of the window.
            Spinbox: Creates a text entry field with up/down arrows for numeric selection.
            Text: Allows multiline text input and display.
            Treeview: Displays hierarchical data.

    =   ASSIGNMENT:
        Write a program to add a Menu system to the menu bar in the window.
        Sample program: tk_02.py


+-----------------------+
| Wednesday, 18-06-2025 |   Day-16
+-----------------------+
    =   Login screen with username and password (tk_03.py)

    =   What is HTML?
        HTML stands for Hyper Text Markup Langauge

    =   What is SGML?
        SGML stands for Standard Generalized Markup Language

    =   There are 3 types of computer languages:
        1)  Passive language
            >   A computer language that doesn't have the ability to compute, iterate,
                condition checking, etc.
            >   This language is used for presentation purpose only
            >   Example of these languages are HTML, SGML, etc.

        2)  Active language
            >   These languages are the first in use. They have the ability to solve
                critical problems.
            >   The active language programs are resident in the client machine. They
                are executed using the resource of the client machine.
            >   Example are: C, C++, Java, Python, etc

        3)  Dynamic language
            >   Dynamic languages are stored in the server machine. On request to execute
                the program it is executed in the server machine using the server resources.
                The output of the program is a passive language. It is transmitted across
                the HTTP connectivity and the client browser refreshes the body of the
                browser.

+----------------------+
| Thursday, 19-06-2025 |   Day-17
+----------------------+
    =   WAP to create the following table header with at least 5 rows of data
        +-------+---------------------------+------------+-------------------------------------------------+
        |       |                           |            |                      AGE GROUP                  |
        |       |                           |            +-----------+------------+------------+-----------+
        |       |                           |            | >5 & <=10 | >10 & <=15 | >15 & <=20 |    >20    |
        |       |                           |            +-----+-----+------+-----+------+-----+-----+-----+
        |  SLNO |  CANDIDATE NAME           |     DOB    |  M  |  F  |   M  |  F  |   M  |  F  |  M  |  F  |
        +-------+---------------------------+------------+-----+-----+------+-----+------+-----+-----+-----+

    =   ASSIGNMENT:
        WAP to design the following calculator:
            +-------------------------------+
            |                          0.00 |
            +-------------------------------+
            |  MC   |  M+   |  M-   |  MR   |
            +-------+-------+-------+-------+
            |   %   |  CE   |   .   |   /   |
            +-------+-------+-------+-------+
            |   7   |   8   |   9   |   x   |
            +-------+-------+-------+-------+
            |   4   |   5   |   6   |   -   |
            +-------+-------+-------+-------+
            |   1   |   2   |   3   |       |
            +-------+---------------|   +   |
            |   0   |       =       |       |
            +-------+---------------+-------+

    =   HOMEWORK ASSIGNMENT:
        Create a table with the following header:
        +-------+-------------------------------+-----------------------------------------------------------------------------------------------------------+
        |       |                               |                                           POPULATION                                                      |
        |       |                               |-----------------------------------------------------+-----------------------------------------------------|
        |       |                               |                           URBAN                     |                           RURAL                     |
        |       |                               |--------------------------+--------------------------+--------------------------+--------------------------|
        |       |                               |           MALE           |           FEMALE         |          MALE            |           FEMALE         |
        |       |                               |-----+------+-------+-----+-----+------+-------+-----+-----+------+-------+-----+-----+------+-------+-----|
        |  SLNO | NAME OF THE DISTRICT          | <5  | 6-15 | 16-25 | >25 | <5  | 6-15 | 16-25 | >25 | <5  | 6-15 | 16-25 | >25 | <5  | 6-15 | 16-25 | >25 |
        |-------+-------------------------------+-----+------+-------+-----+-----+------+-------+-----+-----+------+-------+-----+-----+------+-------+-----|
        |       |                               |     |      |       |     |     |      |       |     |     |      |       |     |     |      |       |     |
        |       |                               |     |      |       |     |     |      |       |     |     |      |       |     |     |      |       |     |
        |       |                               |     |      |       |     |     |      |       |     |     |      |       |     |     |      |       |     |


+--------------------+
| Friday, 20-06-2025 |   Day-18
+--------------------+
    =   HTML
        >   Link images
        >   Image mapping and linking

    =   ASSIGNMENT:
        Map the image in the name figures.jpg to different pages across web.


+--------------------+
| Monday, 23-06-2025 |   Day-19
+--------------------+
    =   HTML frame and frameset

        +-------------------+----------------------------------------------------------------+
        | Political Parties |                                                                |
        | 1. BJP            |                                                                |
        | 2. NDA            |                                                                |
        | 3. AAP            |                                                                |
        | 4. BJD            |                                                                |
        |                   |                                                                |
        +-------------------+                                                                |
        | Leaders           |                                                                |
        | 1. Narendra Modi  |                                                                |
        | 2. Amit Shah      |                                                                |
        | 3. Nirmala        |                                                                |
        |                   |                                                                |
        |                   |                                                                |
        |                   |                                                                |
        |                   |                                                                |
        |                   |                                                                |
        |                   |                                                                |
        |                   |                                                                |
        +-------------------+----------------------------------------------------------------+

    =   Odered List     <ol>...</ol>        Options: 1, i, a, A
            List Item               <li>...</li>
    =   Unordered List  <ul>...</ul>        Options: disc, circle, square
            List Item               <li>...</li>
    =   Definition List <dl>...</dl>
            Definition Term         <dt>...</dt>
            Definition Description  <dd>...</dd>


+---------------------+
| Tuesday, 24-06-2025 |   Day-20
+---------------------+
    =   What are elements and attributes in HTML?
        Elements are reserve words with specific meaning. Element are nested within
        themself. There are 2 types of elements, the first is a self-terminated
        element and second is terminator required element.
        1.  Self-terminated elements
            <br>, <hr>, <area>, <input>, <img>, <frame>, etc.
        2.  Terminator required elements
            <html>...</html>,
            <head>...<.head>
            <body>...</body>
            <frameset>...</frameset>
            <table>...</table>

        Each element has a set of attributes. The attributes control the behaviour
        of the element. There are 3 categories of attributes:
        1.  Standard attribute
            Those attributes which are in particular created for the element. The
            same attribute may not work in other elements.

        2.  Common attribute
            Those attributes that are common to all elements. Example of such attributes
            are ID, CLASS, STYLE, TITLE, LANG, DIR, etc.

        3.  Event attribute
            Those attributes that are applied to UI elements. BUTTON, INPUT, etc. are 
            UI elements. Examples of event attributes are:
                ONCLICK, when the mouse button is clicked on an element;
                ONDBLCLICK, when the mouse button is double-clicked on an element;
                ONMOUSEDOWN, when the mouse button is pressed over an element;
                ONMOUSEUP, when the mouse button is released over an element;
                ONMOUSEOVER, when the mouse is moved onto an element;
                ONMOUSEMOVE, when the mouse is moved while over an element;
                ONMOUSEOUT, when the mouse is moved away from an element;
                ONKEYPRESS, when a key is pressed and released over an element;
                ONKEYDOWN, when a key is pressed down over an element;
                ONKEYUP, when a key is released over an element.

    =   What is CSS?
        CSS stands for Cascading Style Sheet
        CSS is a styling technology to an HTML elements.
        The CSS description are given in a pair of property:value;
        Example:
            color:red; text-align:center; background-color:lightgray;

    =   There are 3 types of application for CSS in HTML:
        1.  Inline CSS
            Those CSS descriptions that are given in the STYLE attribute of the element
            are inline CSS. Inline styling has greater precedence over internal and
            external css.
                <h1 style="color:red; text-align:center; background-color:lightgray;">
                    Hello World
                </h1>
        2.  Internal CSS
            Internal CSS are property:value; pairs provided within the STYLE element.
            The internal css has greater precedence over the external css.
        3.  External CSS
            The CSS descriptions are defined in a separate file called .css.
            The .css is then linked with the help of <link> element.
            Example: <link rel="stylesheet" href="style.css">
            This keeps the css code and the html code in two different files.

    =   ASSIGNMENT:
        Create a table with 10-15 rows and 5-6 columns.
        The alternate rows will be colored with 2 different colors.

