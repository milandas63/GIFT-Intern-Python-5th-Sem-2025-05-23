Start Date: 23-05-2025
Time: Monday to Friday (10:00 am-12:00 am)
Course: PYTHON with DJANGO
WhatsApp group: GIFT-Intern-Python-5th-Sem
GitHub-Link: https://github.com/milandas63/GIFT-Intern-Python-5th-Sem-2025-05-23/
Wifi Password: #A1B2C3E5D4#

Participants:
MILAN DAS                   7978168568      milandas63@gmail.com                milandas63
 1  Adyasha Swain           7894419620      adyashas2023@gift.edu.in            adyasha-as
 2  Akanksha Panigrahi      9337780115      akankshap0517@gmail.com             akankshap1705
 3  Ananya Gumansingh       8260788368      ananyag2023@gift.edu.in             Ananya-2005
 4  Barshita Pattnaik       7684806111      barshita07@gmail.com                Barshitapattnaik
 5  Bidyadhar Behera        9668895756      bidyadharb666@gmail.com             Bidyadhar666
 6  Deepak Kumar Samantara  9861408828      deepakkumarsamantara5@gmail.com     deepakkumarsamantara
 7  Deepak Kumar Senapati   7847983345      deepakkumarsenapati786@gmail.com    Deepak7867
 8  Dibyajyoti Nayak        9861426047
 9  Kasturi Samantaray      9937945726      kasturisamantaray604@gmail.com      KasturiSamantaray02
10  Mohd Anwar              6005194557      anwarbf317@gmail.com                anwrr07
11  P Sumant Raj Patro      7894138336      patropsumantraj@gmail.com           sumant130
12  Prabhu Prasad Jena      9337579220      prabhuprasadj9@gmail.com            prabhu369414
13  Reemarani Panda         9310883613      reemareema3034@gmail.com            reema-2025
14  Sairam Majhi            8480014152      sairammajhi9443@gamil.com           Sairam1407
15  Shakti Prasad Sahoo     7381116465      sahooshakti8018@gmail.com           Okaycore55
16  Smruti Ranjan Barik     7609866172
17  Subhadarsini Jena       8018696003      subhadarsinijena2006@gmail.com      subhadarsinijena
18  Subhalaxmi Nanda        8984108572      subhalaxmi2023@gift.edu.in          Subhalaxmi-2023
19  Subham Satapathy        8637210911      subhamsatpathy2004@gmail.com        Subham596
20  Surya Kant Pradhan      7894849781      suryapradhan693@gmail.com           suryakant969
21  Swayamshree Abhilipsa   6370780385      abhilipsaswayamshree@gmail.com      abhilipsaa-123


+--------------------+
| Friday, 23-05-2025 |  Day-01
+--------------------+
    =   Knowing each other
    =   Induction programme
    =   Prequalification requirement
        >   Atleast one programming language
        >   Must have your own laptop system
    =   Introduction to Cyber Security and Cloud Computing


+--------------------+
| Monday, 26-05-2025 |  Day-02
+--------------------+
    =   Python was created by Guido van Rossum, a Dutch programmer, in the late 1980s
        and officially released in 1991. Here's a summary of how and why Python was created:

    =   The Python programming language is named after the British comedy troupe Monty
        Python's Flying Circus, says Sifars. Guido van Rossum, the creator of Python,
        was a fan of the show and wanted a short, unique, and slightly mysterious name
        for the language. The name "Python" also reflects van Rossum's goal of making
        the language easy to learn and use, says Teradata.

    =   üìú Background and Motivation
        In the late 1980s, van Rossum was working at the Centrum Wiskunde & Informatica (CWI)
        in the Netherlands.

    =   He had worked on a project called ABC, a teaching language designed to be simple
        and easy to learn. However, ABC had limitations and lacked extensibility.

    =   Frustrated with ABC‚Äôs shortcomings, van Rossum wanted to build a new scripting
        language that retained ABC‚Äôs ease of use but added more flexibility, power, and
        extensibility.

    =   üõ†Ô∏è Development of Python
        During a Christmas break in 1989, van Rossum began developing Python as a hobby
        project.

    =   His goals were:
        >   Easy and intuitive syntax.
        >   Code readability and simplicity.
        >   Support for exception handling.
        >   Interfacing with the Amoeba distributed operating system (which he worked on).

    =   Extensibility using C.
        The name ‚ÄúPython‚Äù was inspired by the British comedy group Monty Python‚Äîvan
        Rossum wanted a name that was short, unique, and slightly mysterious, not after
        the snake.

    =   üöÄ First Release
        Python 1.0 was released in February 1991 on the alt.sources newsgroup.

        It included:
        >   Exception handling.
        >   Functions and modules.
        >   Core data types like lists, strings, and dictionaries.
        >   Basic object-oriented features.

    =   üìà Evolution and Impact
        Python gradually grew in popularity through the 1990s and 2000s due to its
        simplicity and versatility.

    =   Major milestones:
        >   Python 2.0 in 2000 introduced garbage collection and list comprehensions.
        >   Python 3.0 in 2008 broke backward compatibility to fix design flaws and
            streamline the language.
        >   Today, Python is maintained by the Python Software Foundation (PSF), with
            contributions from a large global community.

    =   üåç Why It Matters
        Python is now one of the most widely used programming languages in the world,
        especially in fields like:

        Web development
        Data science
        Machine learning
        Automation
        Education

    =   Guido van Rossum is often referred to as Python's "Benevolent Dictator For Life"
        (BDFL), a title he held until he stepped down from the role in 2018.

    =   Let me know if you'd like a timeline or infographic of Python‚Äôs history!

    =   PYTHON KEYWORDS
        Python has a set of keywords that are reserved words that cannot be
        used as variable names, function names, or any other identifiers:

        KEYWORD     DESCRIPTION
         1. and         A logical operator
         2. as          To create an alias
         3. assert      For debugging
         4. break       To break out of a loop
         5. class       To define a class
         6. continue    To continue to the next iteration of a loop
         7. def         To define a function
         8. del         To delete an object
         9. elif        Used in conditional statements, same as else if
        10. else        Used in conditional statements
        11. except      Used with exceptions, what to do when an exception occurs
        12. False       Boolean value, result of comparison operations
        13. finally     Used with exceptions, a block of code that will be executed no matter if there is an exception or not
        14. for         To create a for loop
        15. from        To import specific parts of a module
        16. global      To declare a global variable
        17. if          To make a conditional statement
        18. import      To import a module
        19. in          To check if a value is present in a list, tuple, etc.
        20. is          To test if two variables are equal
        21. lambda      To create an anonymous function
        22. None        Represents a null value
        23. nonlocal    To declare a non-local variable
        24. not         A logical operator
        25. or          A logical operator
        26. pass        A null statement, a statement that will do nothing
        27. raise       To raise an exception
        28. return      To exit a function and return a value
        29. True        Boolean value, result of comparison operations
        30. try         To make a try...except statement
        31. while       To create a while loop
        32. with        Used to simplify exception handling
        33. yield       To return a list of values from a generator


+---------------------+
| Tuesday, 27-05-2025 |  Day-03
+---------------------+
    =   1)  # Single line comment
        2)  """
            Anything embedded within a pair of 3 double quotes is treated as comment
            """
        3)  name = <string>
            string is embedded with double quote or single quote. The choice is yours.
        4)  Addition
        5)  Subtraction
        6)  Multiplication
        7)  Division
        8)  Formula (several operators used together)
        9)  List  []
        10) Dictionary  {}
        11) Set {}

    =   Functions:
        1)  chr(n)      -   Converts a ascii value to its equivallent character
        2)  input()     -   Halts execution and takes a value from the keyboard

    =   ASSIGNMENT:
        Solve the figure programs (Question-11) from Questions.txt

+----------------------+
| Thursday, 28-05-2025 |  Day-04
+----------------------+
    =   What is a range?
        The range() function in Python returns a range object, which is an immutable
        sequence of numbers. It does not return a list or tuple directly. This object
        is memory-efficient because it generates numbers on demand rather than storing
        them all in memory at once.

        The range() function can be used in several ways:
        >   range(stop): Generates numbers from 0 up to (but not including) stop.
        >   range(start, stop): Generates numbers from start up to (but not including) stop.
        >   range(start, stop, step): Generates numbers from start up to (but not including)
            stop, incrementing by step.
        >   The range object can be iterated over using a for loop or converted into a
            list or tuple using the list() or tuple() functions, respectively.

    =   Rules for Python variables:
        >   A variable name must start with a letter or the underscore character
            [A-Z,a-z,_]
        >   A variable name cannot start with a digit
        >   A variable name can only contain alpha-numeric characters and underscores
            (A-z, 0-9, and _ )
        >   Variable names are case-sensitive (age, Age and AGE are three different
            variables)
        >   A variable name cannot be any of the Python keywords.

            name
            _14thStreet
            24praganas

    =   Many Values to Multiple Variables
        x, y, z = 1, 2, 3

    =   One Value to Multiple Variables
        x = y = z = 10

    =   Unpack a Collection
        x, y, z = ["Red","Green","Blue"]

    =   Global Variables
        global.py

    =   Write a program to invert the case of all alphabetic characters?
        invert_case.py

    =   What is tuple?
        >   Tuple is a special type of list that is immutable by nature.
            The content of the list can't be changed.
        >   Tupes are created using round brackets ()

    =   Write a program to print the multiplication table from 2 to 25

    =   ASSIGNMENT
        Count the number of occurrences of each character in a given string?

            Hello World    Students Allowed       Holocaust
               D = 1           A - 1                A - 1
               E - 1           D - 2                C - 1
               H - 1           E - 2                H - 1
               L - 3           L - 2                L - 1
               O - 2           N - 1                O - 2
               R - 1           O - 1                S - 1
               W - 1           S - 2                T - 1
                               T - 2                U - 1
                               U - 1
                               W - 1


+--------------------+
| Friday, 30-05-2025 |  Day-05
+--------------------+
    =   Built-in data types in Python are fundamental data types that are readily available
        for use without requiring any additional libraries or modules. Here's a breakdown
        of the common built-in data types:
        >   Numeric Types:
            int: Represents integer values (e.g., 10, -5, 0).
            float: Represents floating-point numbers (e.g., 3.14, -2.5, 0.0).
            complex: Represents complex numbers with a real and imaginary part (e.g., 2+3j).
        >   Text Type:
            str: Represents sequences of characters (e.g., "hello", 'world').
        >   Sequence Types:
            list: Ordered, mutable collections of items (e.g., [1, 2, 3], ['a', 'b', 'c']).
            tuple: Ordered, immutable collections of items (e.g., (1, 2, 3), ('a', 'b', 'c')).
            range: Represents a sequence of numbers (e.g., range(5) generates 0, 1, 2, 3, 4).
        >   Mapping Type:
            dict: Represents collections of key-value pairs (e.g., {'name': 'Alice', 'age': 30}).
        >   Set Types:
            set: Unordered collections of unique items (e.g., {1, 2, 3}).
            frozenset: Immutable version of set.
        >   Boolean Type:
            bool: Represents boolean values, either True or False.
        >   Binary Types:
            bytes: Immutable sequences of single bytes (e.g., b'hello').
            bytearray: Mutable sequences of single bytes.
            memoryview: Allows access to the internal data of an object without copying.

        These data types form the foundation for working with data in Python. Each type
        has its own properties and methods, allowing you to perform various operations
        based on the type of data you are working with.

    =   Python has the following data types built-in by default, in these categories:
        >   Text Type:	    str
        >   Numeric Types:	int, float, complex
        >   Sequence Types:	list, tuple, range
        >   Mapping Type:	dict
        >   Set Types:	    set, frozenset
        >   Boolean Type:	bool
        >   Binary Types:	bytes, bytearray, memoryview
        >   None Type:	    NoneType

    =   Getting the Data Type
        You can get the data type of any object by using the type() function:

    =   Setting the Data Type
        In Python, the data type is set when you assign a value to a variable:

        Example	Data Type
            x = "Hello World"	                            str
            x = 20	                                        int
            x = 20.5	                                    float
            x = 1j	                                        complex
            x = ["apple", "banana", "cherry"]	            list
            x = ("apple", "banana", "cherry")	            tuple
            x = range(6)	                                range
            x = {"name" : "John", "age" : 36}	            dict
            x = {"apple", "banana", "cherry"}	            set
            x = frozenset({"apple", "banana", "cherry"})	frozenset
            x = True	                                    bool
            x = b"Hello"	                                bytes
            x = bytearray(5)	                            bytearray
            x = memoryview(bytes(5))	                    memoryview
            x = None	                                    NoneType

    =   Setting the Specific Data Type
        If you want to specify the data type, you can use the following constructor
        functions:

        Example	Data Type
            x = str("Hello World")	                        str	
            x = int(20)	                                    int	
            x = float(20.5)	                                float	
            x = complex(1j)	                                complex	
            x = list(("apple", "banana", "cherry"))	        list	
            x = tuple(("apple", "banana", "cherry"))	    tuple	
            x = range(6)	                                range	
            x = dict(name="John", age=36)	                dict	
            x = set(("apple", "banana", "cherry"))	        set	
            x = frozenset(("apple", "banana", "cherry"))	frozenset	
            x = bool(5)	                                    bool	
            x = bytes(5)	                                bytes	
            x = bytearray(5)	                            bytearray	
            x = memoryview(bytes(5))	                    memoryview	


